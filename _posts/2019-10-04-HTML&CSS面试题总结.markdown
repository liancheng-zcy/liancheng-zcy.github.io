---
layout: post
color: pink
# cover: "https://sm.ms/image/tulqxfmAdK7ygbk"
title: "HTML&CSS面试题总结"
tags: "js,html,css"
notebook: （js）
date: 2019-10-04
categories: LiAncheng update
---
## HTML&CSS

1、页面乱码？

- 我们正常编辑html文件时的编码格式为UTF-8

- 但是浏览器你不告诉它，它并不知道用什么方式来解码。

- 当编码方式是一种，解码方式是另外一种时，就会出现乱码，需要设置<meta charset = "??">，来申明用什么方式来解码。

 2、为什么html5只用申明<!DOCTYPE HTML>

  因为html不基于SGML（国际上定义电子文档和内容描述的[标准](https://wiki.mbalib.com/wiki/标准)）

 3、前端需要注意哪些搜索SEO?

  **1. 合理的 title、description、keywords**：

  - 搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；
  - description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；
  - keywords 列举出重要关键词即可。

  **2. 语义化的 HTML 代码，符合 W3C 规范**：语义化代码让搜索引擎容易理解网页。

  **3. 重要内容 HTML 代码放在最前**：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取。

  **4. 重要内容不要用 js 输出**：爬虫不会执行 js 获取内容。

  **5. 少用 iframe**：搜索引擎不会抓取 iframe 中的内容

  **6. 非装饰性图片必须加 alt**。

  **7. 提高网站速度**：网站速度是搜索引擎排序的一个重要指标。

  

  ype=hidden 隐藏域有什么作用？举例说明。

  

  

 4、type=hidden 隐藏域的作用是：

  1. 暂存一些信息。比如在`<input type="hidden" name="_" value="_">`里边埋了一个值，下次我们要用的时候，就直接可以定位到这个元素去获取它的值，获取到后就可以用了，但用户什么都不知道；
  2. 由于可以暂存信息，那么在针对 csrf 攻击使用一些安全策略时，可以用到这个功能。

  

  比如打开一个页面，实际这个页面是写好的模板，然后后端往里边填充数据，填充好后让你看得到。
  换句话说，这个页面是后端处理后得到的页面。那假如说，后端在渲染这个页面给我们时（返回给浏览器之前），他就通过这种方式在这里加上这个值—— `<input type="hidden" name="csrf" value="123456oliver">`，他把这个东西写好后发给你，发给你之后，你看到的页面表面上没什么特别的变化，可实际上有一个点已经埋下了—— `name="csrf" value="123456oliver"`。
  接下来，用户该干什么还是继续干，填写用户名、密码等，填写完后点击“提交”。当用户点击“提交”按钮的时候，用户所填写的所有信息都会提交给后台，同时会提交 `<input type="hidden" name="csrf" value="123456oliver">`里的这个值`csrf=123456oliver`。
  提交给后台后，后台就可以做个“校验”，看看这个值对不对，如果这个值是对的，那你用户的提交是安全的。
  假如说没有这样一个参数、接口，那任何人都可以伪造一个这样的页面。比如说他知道我们的请求地址（ action 的值），就可以用 method 发送一个 get/post 请求，把所有的参数都发进去，那就相当于修改了数据库。
  但如果我们有这个值——`csrf=123456oliver`，而他没有这样一个值，或得到的值是错的，那他即使发送了这些数据，服务器也是不认可的。
  只有当他发的这个值是对的，才能说明他有这个权限，表示他是一个合法的用户。这样就可以阻止 csrf 攻击。

  

  5、CSRF 攻击是什么？如何防范？

  **1. 是什么：**
  CSRF（Cross-site request forgery），中文名称：跨站请求伪造。攻击者盗用了你的身份，以你的名义发送恶意请求。
  CSRF 能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。例如通过 QQ 等聊天软件发送的链接(有些还伪装成短域名，用户无法分辨)，攻击者就能迫使 Web 应用的用户去执行攻击者预设的操作。例如，当用户登录网络银行去查看其存款余额，在他没有退出时，就点击了一个 QQ 好友发来的链接，那么该用户银行帐户中的资金就有可能被转移到攻击者指定的帐户中。
  **2. 如何防范：**
  采用 anti-csrf-token 方案。

  ① 服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面（一般埋入 form 表单内，`<input type="hidden" name="_csrf_token" value="xxxx">`）；

  ② 服务端设置 setCookie，把该随机数作为 cookie 或者 session 种入用户浏览器；

  ③ 当用户发送 GET 或者 POST 请求时带上`_csrf_token`参数（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括`_csrf_token`）；

  ④ 后台在接受到请求后解析请求的cookie获取`_csrf_token`的值，然后和用户请求提交的`_csrf_token`做个比较，如果相等表示请求是合法的。

  6、让元素看不见的方法？
  **1、**  opacity:0; 透明度为0，整体都看不见了。
  **2、**   visibility:hidden; 整体看不见了，但是任然占用原来的位置；
  **3、**  display:none; 整体都消失了，不占用位置；
  **4、** background-color:rgba(0,0,0,0,2);这是背景色透明，其他保持不变。
  7、单行文本溢...出怎么实现?
```
  span{
  white-space: nowrap;  /* 首先，强制文本不换行 */
  overflow: hidden;  /* 其次，隐藏溢出 */
  text-overflow: ellipsis;  /* 最后，对溢出的文本用 ellipsis 省略号代替 */
}
/* 注意：三个属性必须连用才生效 */
```
8、多行文本溢出实现...怎么实现？
  
  

### 持续添加！！！