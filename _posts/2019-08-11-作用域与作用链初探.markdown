---
layout: post
color: red
# cover: "http://s3-ap-southeast-1.amazonaws.com/monster-machine/images/horssghonr-1436272011-Midas.jpg"
title:  "作用域与作用域初探!"
tags: 标签（js,前端）
notebook: （js）
date:   2019-08-11 
categories: LiAncheng update
---
## 函数作用域和变量作用

1、函数作用域的特点，可以调用到外面的函数；但是调用不到里面的函数。  
2、变量作用域的特点：可以调用到外面的全局变量，但是调用不到里面的变量。


```
    function test(){
        return  10;
    }
    console.log(test());//直接打印return返回的值。
    function foo(){
     var a =  test();
     console.log(a);
    }
     foo();
     console.log(foo()) ;//没有return返回的是undefined，直接打印函数返回的是undefind和函数执行的结果。 

```
---

```
    function foo(){
    console.log('foo');
    function baz(){
        console.log('baz');
    }
    baz();
    }
    foo();
    baz(); //执行错误可以调到外面的函数，调不到里面的函数 
```
---
```

    function foo(){
        var b = 20;
    }
    function bar(){
        console.log(b);//undefined  不能调用到函数里面的函数
    }
    foo();
    bar();  

```
---
```
    function foo(){
        var b = 20;
    }
    function bar(){
        console.log(b);//undefined  不能调用到函数里面的函数
    }
    foo();
    bar();  
    //对比下面的函数可以打印b
    var b; //全局变量
    function foo() {
        b = 20; //改函数完成对b的赋值
    }

    function bar() {
        console.log(b); //20
    }
    foo();
    bar();
```
---
### 作用域链：变量的查找顺序，就近原则，一层一层往外找

1、变量从10开始依次往外找
```
    // var a = 5;
        function foo(){
        //    var a = 7;
            function bar(){
                var a = 10;
                console.log(a);
            }
            bar();
        }
        foo();
```
2、
```
//重点
  var a = 10;
        function foo(){
            console.log( a );//undefined
            var a = 20;
        }
        foo(); 
//对比
  var a = 10;
        function foo(){
            console.log( a );
            a = 20;
        }
        foo(); 
```
3、
```
var a = 10;
        function foo(a){
            a += 5;
            console.log(a);//15
        }
        foo(a);
        console.log(a); //10

```
4、
```
var a = 10;
        function foo(){
            var a = 20;
            bar();//在这调用函数和打印a没什么关系
        }
        function bar(){
            console.log(a);//10
        } 
        foo(); 
```
5、全局变量会一直被调用，而函数里的变量函数每次调用都会生成一个全新的变量。
```
   var a = 10;
        function foo(){
            a++;
            console.log(a);
        }

        foo();//11
        foo();//12
        foo();//13


        function foo(){
            var a = 10;   //没调用一次函数，就会产生一个全新的变量，互相不影响
            a++;
            console.log(a);
        }

        foo();//11
        foo();//11
        foo();//11
```
### 继续增加！！！！